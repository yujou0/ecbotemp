{
  "version": 3,
  "sources": ["../../is-retry-allowed/index.js", "../../axios-retry/es/index.mjs"],
  "sourcesContent": ["'use strict';\n\nconst denyList = new Set([\n\t'ENOTFOUND',\n\t'ENETUNREACH',\n\n\t// SSL errors from https://github.com/nodejs/node/blob/fc8e3e2cdc521978351de257030db0076d79e0ab/src/crypto/crypto_common.cc#L301-L328\n\t'UNABLE_TO_GET_ISSUER_CERT',\n\t'UNABLE_TO_GET_CRL',\n\t'UNABLE_TO_DECRYPT_CERT_SIGNATURE',\n\t'UNABLE_TO_DECRYPT_CRL_SIGNATURE',\n\t'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY',\n\t'CERT_SIGNATURE_FAILURE',\n\t'CRL_SIGNATURE_FAILURE',\n\t'CERT_NOT_YET_VALID',\n\t'CERT_HAS_EXPIRED',\n\t'CRL_NOT_YET_VALID',\n\t'CRL_HAS_EXPIRED',\n\t'ERROR_IN_CERT_NOT_BEFORE_FIELD',\n\t'ERROR_IN_CERT_NOT_AFTER_FIELD',\n\t'ERROR_IN_CRL_LAST_UPDATE_FIELD',\n\t'ERROR_IN_CRL_NEXT_UPDATE_FIELD',\n\t'OUT_OF_MEM',\n\t'DEPTH_ZERO_SELF_SIGNED_CERT',\n\t'SELF_SIGNED_CERT_IN_CHAIN',\n\t'UNABLE_TO_GET_ISSUER_CERT_LOCALLY',\n\t'UNABLE_TO_VERIFY_LEAF_SIGNATURE',\n\t'CERT_CHAIN_TOO_LONG',\n\t'CERT_REVOKED',\n\t'INVALID_CA',\n\t'PATH_LENGTH_EXCEEDED',\n\t'INVALID_PURPOSE',\n\t'CERT_UNTRUSTED',\n\t'CERT_REJECTED',\n\t'HOSTNAME_MISMATCH'\n]);\n\n// TODO: Use `error?.code` when targeting Node.js 14\nmodule.exports = error => !denyList.has(error && error.code);\n", "import isRetryAllowed from 'is-retry-allowed';\n\nexport const namespace = 'axios-retry';\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkError(error) {\n  return (\n    !error.response &&\n    Boolean(error.code) && // Prevents retrying cancelled requests\n    error.code !== 'ECONNABORTED' && // Prevents retrying timed out requests\n    isRetryAllowed(error)\n  ); // Prevents retrying unsafe errors\n}\n\nconst SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isRetryableError(error) {\n  return (\n    error.code !== 'ECONNABORTED' &&\n    (!error.response || (error.response.status >= 500 && error.response.status <= 599))\n  );\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n\n/**\n * @return {number} - delay in milliseconds, always 0\n */\nfunction noDelay() {\n  return 0;\n}\n\n/**\n * Set delayFactor 1000 for an exponential delay to occur on the order\n * of seconds\n * @param  {number} [retryNumber=0]\n * @param  {Error}  error - unused; for existing API of retryDelay callback\n * @param  {number} [delayFactor=100] milliseconds\n * @return {number} - delay in milliseconds\n */\nexport function exponentialDelay(retryNumber = 0, error, delayFactor = 100) {\n  const delay = Math.pow(2, retryNumber) * delayFactor;\n  const randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n  return delay + randomSum;\n}\n\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @return {Object}\n */\nfunction getCurrentState(config) {\n  const currentState = config[namespace] || {};\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {AxiosRetryConfig} defaultOptions\n * @return {AxiosRetryConfig}\n */\nfunction getRequestOptions(config, defaultOptions) {\n  return { ...defaultOptions, ...config[namespace] };\n}\n\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n\n/**\n * Checks retryCondition if request can be retried. Handles it's retruning value or Promise.\n * @param  {number} retries\n * @param  {Function} retryCondition\n * @param  {Object} currentState\n * @param  {Error} error\n * @return {boolean}\n */\nasync function shouldRetry(retries, retryCondition, currentState, error) {\n  const shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error);\n\n  // This could be a promise\n  if (typeof shouldRetryOrPromise === 'object') {\n    try {\n      const shouldRetryPromiseResult = await shouldRetryOrPromise;\n      // keep return true unless shouldRetryPromiseResult return false for compatibility\n      return shouldRetryPromiseResult !== false;\n    } catch (_err) {\n      return false;\n    }\n  }\n  return shouldRetryOrPromise;\n}\n\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Exponential back-off retry delay between requests\n * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});\n *\n * // Custom retry delay\n * axiosRetry(axios, { retryDelay : (retryCount) => {\n *   return retryCount * 1000;\n * }});\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {boolean} [defaultOptions.shouldResetTimeout=false]\n *        Defines if the timeout should be reset between retries\n * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n * @param {Function} [defaultOptions.retryDelay=noDelay]\n *        A function to determine the delay between retry requests\n * @param {Function} [defaultOptions.onRetry=()=>{}]\n *        A function to get notified when a retry occurs\n * @return {{ requestInterceptorId: number, responseInterceptorId: number }}\n *        The ids of the interceptors added to the request and to the response (so they can be ejected at a later time)\n */\nexport default function axiosRetry(axios, defaultOptions) {\n  const requestInterceptorId = axios.interceptors.request.use((config) => {\n    const currentState = getCurrentState(config);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n\n  const responseInterceptorId = axios.interceptors.response.use(null, async (error) => {\n    const { config } = error;\n\n    // If we have no information to retry the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    const {\n      retries = 3,\n      retryCondition = isNetworkOrIdempotentRequestError,\n      retryDelay = noDelay,\n      shouldResetTimeout = false,\n      onRetry = () => {}\n    } = getRequestOptions(config, defaultOptions);\n\n    const currentState = getCurrentState(config);\n\n    if (await shouldRetry(retries, retryCondition, currentState, error)) {\n      currentState.retryCount += 1;\n      const delay = retryDelay(currentState.retryCount, error);\n\n      // Axios fails merging this configuration to the default configuration because it has an issue\n      // with circular structures: https://github.com/mzabriskie/axios/issues/370\n      fixConfig(axios, config);\n\n      if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {\n        const lastRequestDuration = Date.now() - currentState.lastRequestTime;\n        const timeout = config.timeout - lastRequestDuration - delay;\n        if (timeout <= 0) {\n          return Promise.reject(error);\n        }\n        config.timeout = timeout;\n      }\n\n      config.transformRequest = [(data) => data];\n\n      onRetry(currentState.retryCount, error, config);\n\n      return new Promise((resolve) => setTimeout(() => resolve(axios(config)), delay));\n    }\n\n    return Promise.reject(error);\n  });\n\n  return { requestInterceptorId, responseInterceptorId };\n}\n\n// Compatibility with CommonJS\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.isRetryableError = isRetryableError;\n"],
  "mappings": "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",
  "names": ["namespace", "isNetworkError", "error", "response", "Boolean", "code", "isRetryAllowed", "SAFE_HTTP_METHODS", "IDEMPOTENT_HTTP_METHODS", "concat", "isRetryableError", "status", "isSafeRequestError", "config", "indexOf", "method", "isIdempotentRequestError", "isNetworkOrIdempotentRequestError", "noDelay", "exponentialDelay", "retryNumber", "delayFactor", "delay", "Math", "pow", "randomSum", "random", "getCurrentState", "currentState", "retryCount", "getRequestOptions", "defaultOptions", "fixConfig", "axios", "defaults", "agent", "httpAgent", "httpsAgent", "shouldRetry", "retries", "retryCondition", "shouldRetryOrPromise", "shouldRetryPromiseResult", "_err", "requestInterceptorId", "interceptors", "request", "use", "lastRequestTime", "Date", "now", "responseInterceptorId", "Promise", "reject", "retryDelay", "shouldResetTimeout", "onRetry", "timeout", "lastRequestDuration", "transformRequest", "data", "resolve", "setTimeout", "axiosRetry"]
}
